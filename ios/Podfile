platform :ios, (podfile_properties['ios.deploymentTarget'] || '13.0') rescue '13.0'
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

require 'json'

# Load Podfile properties
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json')))

# Flipper configuration
def flipper_configuration(podfile_properties)
  flipper_version = '0.125.0'
  flipper_config = FlipperConfiguration.disabled

  if ENV['NO_FLIPPER'] == '1'
    flipper_config = FlipperConfiguration.disabled
  elsif podfile_properties.key?('ios.flipper')
    if podfile_properties['ios.flipper'] == 'true'
      flipper_config = FlipperConfiguration.enabled(["Debug", "Release"])
    elsif podfile_properties['ios.flipper'] != 'false'
      flipper_config = FlipperConfiguration.enabled(["Debug", "Release"], { 'Flipper' => podfile_properties['ios.flipper'] })
    end
  end

  flipper_config
end

target 'SpotifyMusicFuckinLyrics' do
  use_expo_modules!
  config = use_native_modules!

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Note that if you have use_frameworks! enabled, Flipper will not work if enabled
    :flipper_configuration => flipper_configuration(podfile_properties)
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end